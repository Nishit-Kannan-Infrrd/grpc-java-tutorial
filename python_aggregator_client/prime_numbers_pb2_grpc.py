# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import prime_numbers_pb2 as prime__numbers__pb2


class NumberServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.checkIfPrime = channel.unary_unary(
                '/NumberService/checkIfPrime',
                request_serializer=prime__numbers__pb2.Number.SerializeToString,
                response_deserializer=prime__numbers__pb2.BoolResponse.FromString,
                )
        self.findPrimes = channel.unary_stream(
                '/NumberService/findPrimes',
                request_serializer=prime__numbers__pb2.Number.SerializeToString,
                response_deserializer=prime__numbers__pb2.Number.FromString,
                )
        self.primeList = channel.stream_unary(
                '/NumberService/primeList',
                request_serializer=prime__numbers__pb2.Number.SerializeToString,
                response_deserializer=prime__numbers__pb2.NumberList.FromString,
                )
        self.primeStream = channel.stream_stream(
                '/NumberService/primeStream',
                request_serializer=prime__numbers__pb2.Number.SerializeToString,
                response_deserializer=prime__numbers__pb2.Number.FromString,
                )


class NumberServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def checkIfPrime(self, request, context):
        """unary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findPrimes(self, request, context):
        """server streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def primeList(self, request_iterator, context):
        """client side streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def primeStream(self, request_iterator, context):
        """bi directional streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NumberServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'checkIfPrime': grpc.unary_unary_rpc_method_handler(
                    servicer.checkIfPrime,
                    request_deserializer=prime__numbers__pb2.Number.FromString,
                    response_serializer=prime__numbers__pb2.BoolResponse.SerializeToString,
            ),
            'findPrimes': grpc.unary_stream_rpc_method_handler(
                    servicer.findPrimes,
                    request_deserializer=prime__numbers__pb2.Number.FromString,
                    response_serializer=prime__numbers__pb2.Number.SerializeToString,
            ),
            'primeList': grpc.stream_unary_rpc_method_handler(
                    servicer.primeList,
                    request_deserializer=prime__numbers__pb2.Number.FromString,
                    response_serializer=prime__numbers__pb2.NumberList.SerializeToString,
            ),
            'primeStream': grpc.stream_stream_rpc_method_handler(
                    servicer.primeStream,
                    request_deserializer=prime__numbers__pb2.Number.FromString,
                    response_serializer=prime__numbers__pb2.Number.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NumberService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NumberService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def checkIfPrime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NumberService/checkIfPrime',
            prime__numbers__pb2.Number.SerializeToString,
            prime__numbers__pb2.BoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def findPrimes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/NumberService/findPrimes',
            prime__numbers__pb2.Number.SerializeToString,
            prime__numbers__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def primeList(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/NumberService/primeList',
            prime__numbers__pb2.Number.SerializeToString,
            prime__numbers__pb2.NumberList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def primeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/NumberService/primeStream',
            prime__numbers__pb2.Number.SerializeToString,
            prime__numbers__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
